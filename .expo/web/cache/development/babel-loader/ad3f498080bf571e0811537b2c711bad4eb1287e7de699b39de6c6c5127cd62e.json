{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport React from 'react';\nimport createElement from \"react-native-web/dist/exports/createElement\";\nimport { prepare } from \"./utils/prepare\";\nimport { convertInt32ColorToRGBA } from \"./utils/convertInt32Color\";\nimport { camelCaseToDashed, remeasure } from \"./utils\";\nimport { hasTouchableProperty } from \"./utils/hasProperty\";\nimport SvgTouchableMixin from \"../lib/SvgTouchableMixin\";\nexport var WebShape = function (_React$Component) {\n  function WebShape(props) {\n    var _this;\n    _classCallCheck(this, WebShape);\n    _this = _callSuper(this, WebShape, [props]);\n    _this.elementRef = React.createRef();\n    _this.lastMergedProps = {};\n    if (hasTouchableProperty(props)) {\n      SvgTouchableMixin(_this);\n    }\n    _this._remeasureMetricsOnActivation = remeasure.bind(_this);\n    return _this;\n  }\n  _inherits(WebShape, _React$Component);\n  return _createClass(WebShape, [{\n    key: \"prepareProps\",\n    value: function prepareProps(props) {\n      return props;\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      var merged = Object.assign({}, this.props, this.lastMergedProps, props.style);\n      this.lastMergedProps = merged;\n      var clean = prepare(this, this.prepareProps(merged));\n      var current = this.elementRef.current;\n      if (current) {\n        for (var cleanAttribute of Object.keys(clean)) {\n          var cleanValue = clean[cleanAttribute];\n          switch (cleanAttribute) {\n            case 'ref':\n            case 'children':\n              break;\n            case 'style':\n              for (var partialStyle of [].concat((_clean$style = clean.style) != null ? _clean$style : [])) {\n                var _clean$style;\n                Object.assign(current.style, partialStyle);\n              }\n              break;\n            case 'fill':\n              if (cleanValue && typeof cleanValue === 'object') {\n                var value = cleanValue;\n                current.setAttribute('fill', convertInt32ColorToRGBA(value.payload));\n              }\n              break;\n            case 'stroke':\n              if (cleanValue && typeof cleanValue === 'object') {\n                var _value = cleanValue;\n                current.setAttribute('stroke', convertInt32ColorToRGBA(_value.payload));\n              }\n              break;\n            default:\n              current.setAttribute(camelCaseToDashed(cleanAttribute), cleanValue);\n              break;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.tag) {\n        throw new Error('When extending `WebShape` you need to overwrite either `tag` or `render`!');\n      }\n      this.lastMergedProps = {};\n      return createElement(this.tag, prepare(this, this.prepareProps(this.props)));\n    }\n  }]);\n}(React.Component);","map":{"version":3,"names":["React","createElement","prepare","convertInt32ColorToRGBA","camelCaseToDashed","remeasure","hasTouchableProperty","SvgTouchableMixin","WebShape","_React$Component","props","_this","_classCallCheck","_callSuper","elementRef","createRef","lastMergedProps","_remeasureMetricsOnActivation","bind","_inherits","_createClass","key","value","prepareProps","setNativeProps","merged","Object","assign","style","clean","current","cleanAttribute","keys","cleanValue","partialStyle","concat","_clean$style","setAttribute","payload","render","tag","Error","Component"],"sources":["C:\\Users\\rauna\\Project Finalysis\\node_modules\\react-native-svg\\src\\web\\WebShape.ts"],"sourcesContent":["import React, { type JSX } from 'react';\nimport {\n  GestureResponderEvent,\n  // @ts-ignore it is not seen in exports\n  unstable_createElement as createElement,\n} from 'react-native';\n\nimport { BaseProps } from './types';\nimport { prepare } from './utils/prepare';\nimport { convertInt32ColorToRGBA } from './utils/convertInt32Color';\nimport { camelCaseToDashed, remeasure } from './utils';\nimport { hasTouchableProperty } from './utils/hasProperty';\nimport SvgTouchableMixin from '../lib/SvgTouchableMixin';\n\nexport class WebShape<\n  P extends BaseProps = BaseProps,\n> extends React.Component<P> {\n  [x: string]: unknown;\n  protected tag?: React.ElementType;\n  protected prepareProps(props: P) {\n    return props;\n  }\n\n  elementRef =\n    React.createRef<SVGElement>() as React.MutableRefObject<SVGElement | null>;\n\n  lastMergedProps: Partial<P> = {};\n\n  /**\n   * disclaimer: I am not sure why the props are wrapped in a `style` attribute here, but that's how reanimated calls it\n   */\n  setNativeProps(props: { style: P }) {\n    const merged = Object.assign(\n      {},\n      this.props,\n      this.lastMergedProps,\n      props.style\n    );\n    this.lastMergedProps = merged;\n    const clean = prepare(this, this.prepareProps(merged));\n    const current = this.elementRef.current;\n    if (current) {\n      for (const cleanAttribute of Object.keys(clean)) {\n        const cleanValue = clean[cleanAttribute as keyof typeof clean];\n        switch (cleanAttribute) {\n          case 'ref':\n          case 'children':\n            break;\n          case 'style':\n            // style can be an object here or an array, so we convert it to an array and assign each element\n            for (const partialStyle of ([] as unknown[]).concat(\n              clean.style ?? []\n            )) {\n              Object.assign(current.style, partialStyle);\n            }\n            break;\n          case 'fill':\n            if (cleanValue && typeof cleanValue === 'object') {\n              const value = cleanValue as { payload: number };\n              current.setAttribute(\n                'fill',\n                convertInt32ColorToRGBA(value.payload)\n              );\n            }\n            break;\n          case 'stroke':\n            if (cleanValue && typeof cleanValue === 'object') {\n              const value = cleanValue as { payload: number };\n              current.setAttribute(\n                'stroke',\n                convertInt32ColorToRGBA(value.payload)\n              );\n            }\n            break;\n          default:\n            // apply all other incoming prop updates as attributes on the node\n            // same logic as in https://github.com/software-mansion/react-native-reanimated/blob/d04720c82f5941532991b235787285d36d717247/src/reanimated2/js-reanimated/index.ts#L38-L39\n            // @ts-expect-error TODO: fix this\n            current.setAttribute(camelCaseToDashed(cleanAttribute), cleanValue);\n            break;\n        }\n      }\n    }\n  }\n\n  _remeasureMetricsOnActivation: () => void;\n  touchableHandleStartShouldSetResponder?: (\n    e: GestureResponderEvent\n  ) => boolean;\n\n  touchableHandleResponderMove?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderGrant?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderRelease?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminate?: (e: GestureResponderEvent) => void;\n  touchableHandleResponderTerminationRequest?: (\n    e: GestureResponderEvent\n  ) => boolean;\n\n  constructor(props: P) {\n    super(props);\n\n    // Do not attach touchable mixin handlers if SVG element doesn't have a touchable prop\n    if (hasTouchableProperty(props)) {\n      SvgTouchableMixin(this);\n    }\n\n    this._remeasureMetricsOnActivation = remeasure.bind(this);\n  }\n\n  render(): JSX.Element {\n    if (!this.tag) {\n      throw new Error(\n        'When extending `WebShape` you need to overwrite either `tag` or `render`!'\n      );\n    }\n    this.lastMergedProps = {};\n    return createElement(\n      this.tag,\n      prepare(this, this.prepareProps(this.props))\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}