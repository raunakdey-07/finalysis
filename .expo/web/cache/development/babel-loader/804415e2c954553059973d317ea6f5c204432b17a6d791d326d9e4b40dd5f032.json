{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nvar Point = _createClass(function Point(x, y) {\n  _classCallCheck(this, Point);\n  this.x = x;\n  this.y = y;\n});\nvar Size = _createClass(function Size(width, height) {\n  _classCallCheck(this, Size);\n  this.width = width;\n  this.height = height;\n});\nvar Rect = _createClass(function Rect(x, y, width, height) {\n  _classCallCheck(this, Rect);\n  this.x = x;\n  this.y = y;\n  this.width = width;\n  this.height = height;\n});\nvar swapSizeDimmensions = function swapSizeDimmensions(size) {\n  return new Size(size.height, size.width);\n};\nvar makeChildlessRect = function makeChildlessRect(_ref) {\n  var displayInsets = _ref.displayInsets,\n    windowDims = _ref.windowDims,\n    placement = _ref.placement;\n  switch (placement) {\n    case 'bottom':\n      return new Rect(windowDims.width / 2, displayInsets.top, 1, 1);\n    case 'right':\n      return new Rect(displayInsets.left, windowDims.height / 2, 1, 1);\n    case 'left':\n      return new Rect(windowDims.width - displayInsets.right, windowDims.height / 2, 1, 1);\n    case 'top':\n    default:\n      return new Rect(windowDims.width / 2, windowDims.height - displayInsets.bottom, 1, 1);\n  }\n};\nvar computeCenterGeometry = function computeCenterGeometry(_ref2) {\n  var childRect = _ref2.childRect,\n    contentSize = _ref2.contentSize,\n    displayInsets = _ref2.displayInsets,\n    windowDims = _ref2.windowDims;\n  var maxWidth = windowDims.width - (displayInsets.left + displayInsets.right);\n  var maxHeight = windowDims.height - (displayInsets.top + displayInsets.bottom);\n  var adjustedContentSize = new Size(contentSize.width >= maxWidth ? maxWidth : -1, contentSize.height >= maxHeight ? maxHeight : -1);\n  var tooltipOrigin = new Point(adjustedContentSize.width === -1 ? (maxWidth - contentSize.width) / 2 + displayInsets.left : displayInsets.left, adjustedContentSize.height === -1 ? (maxHeight - contentSize.height) / 2 + displayInsets.top : displayInsets.top);\n  var anchorPoint = new Point(childRect.x + childRect.width / 2.0, childRect.y);\n  return {\n    tooltipOrigin: tooltipOrigin,\n    anchorPoint: anchorPoint,\n    placement: 'center',\n    adjustedContentSize: adjustedContentSize\n  };\n};\nvar computeTopGeometry = function computeTopGeometry(_ref3) {\n  var childRect = _ref3.childRect,\n    contentSize = _ref3.contentSize,\n    arrowSize = _ref3.arrowSize,\n    displayInsets = _ref3.displayInsets,\n    windowDims = _ref3.windowDims,\n    childContentSpacing = _ref3.childContentSpacing;\n  var maxWidth = windowDims.width - (displayInsets.left + displayInsets.right);\n  var adjustedContentSize = new Size(Math.min(maxWidth, contentSize.width), contentSize.height);\n  var tooltipOrigin = new Point(contentSize.width >= maxWidth ? displayInsets.left : Math.max(displayInsets.left, childRect.x + (childRect.width - adjustedContentSize.width) / 2), Math.max(displayInsets.top - childContentSpacing, childRect.y - contentSize.height - arrowSize.height - childContentSpacing));\n  var anchorPoint = new Point(childRect.x + childRect.width / 2.0, childRect.y - childContentSpacing);\n  if (anchorPoint.x + arrowSize.width > windowDims.width - displayInsets.right) {\n    anchorPoint.x = windowDims.width - displayInsets.right - Math.abs(arrowSize.width - arrowSize.height) - 8;\n  } else if (anchorPoint.x - arrowSize.width < displayInsets.left) {\n    anchorPoint.x = displayInsets.left + Math.abs(arrowSize.width - arrowSize.height) + 8;\n  }\n  var topPlacementBottomBound = anchorPoint.y - arrowSize.height;\n  if (tooltipOrigin.y + contentSize.height > topPlacementBottomBound) {\n    adjustedContentSize.height = topPlacementBottomBound - tooltipOrigin.y;\n  }\n  if (tooltipOrigin.x + contentSize.width > maxWidth) {\n    tooltipOrigin.x = windowDims.width - displayInsets.right - adjustedContentSize.width;\n  }\n  return {\n    tooltipOrigin: tooltipOrigin,\n    anchorPoint: anchorPoint,\n    placement: 'top',\n    adjustedContentSize: adjustedContentSize\n  };\n};\nvar computeBottomGeometry = function computeBottomGeometry(_ref4) {\n  var childRect = _ref4.childRect,\n    contentSize = _ref4.contentSize,\n    arrowSize = _ref4.arrowSize,\n    displayInsets = _ref4.displayInsets,\n    windowDims = _ref4.windowDims,\n    childContentSpacing = _ref4.childContentSpacing;\n  var maxWidth = windowDims.width - (displayInsets.left + displayInsets.right);\n  var adjustedContentSize = new Size(Math.min(maxWidth, contentSize.width), contentSize.height);\n  var tooltipOrigin = new Point(contentSize.width >= maxWidth ? displayInsets.left : Math.max(displayInsets.left, childRect.x + (childRect.width - adjustedContentSize.width) / 2), Math.min(windowDims.height - displayInsets.bottom + childContentSpacing, childRect.y + childRect.height + arrowSize.height + childContentSpacing));\n  var anchorPoint = new Point(childRect.x + childRect.width / 2.0, childRect.y + childRect.height + childContentSpacing);\n  if (anchorPoint.x + arrowSize.width > windowDims.width - displayInsets.right) {\n    anchorPoint.x = windowDims.width - displayInsets.right - Math.abs(arrowSize.width - arrowSize.height) - 8;\n  } else if (anchorPoint.x - arrowSize.width < displayInsets.left) {\n    anchorPoint.x = displayInsets.left + Math.abs(arrowSize.width - arrowSize.height) + 8;\n  }\n  if (tooltipOrigin.y + contentSize.height > windowDims.height - displayInsets.bottom) {\n    adjustedContentSize.height = windowDims.height - displayInsets.bottom - tooltipOrigin.y;\n  }\n  if (tooltipOrigin.x + contentSize.width > maxWidth) {\n    tooltipOrigin.x = windowDims.width - displayInsets.right - adjustedContentSize.width;\n  }\n  return {\n    tooltipOrigin: tooltipOrigin,\n    anchorPoint: anchorPoint,\n    placement: 'bottom',\n    adjustedContentSize: adjustedContentSize\n  };\n};\nvar computeLeftGeometry = function computeLeftGeometry(_ref5) {\n  var childRect = _ref5.childRect,\n    contentSize = _ref5.contentSize,\n    arrowSize = _ref5.arrowSize,\n    displayInsets = _ref5.displayInsets,\n    windowDims = _ref5.windowDims,\n    childContentSpacing = _ref5.childContentSpacing;\n  var maxHeight = windowDims.height - (displayInsets.top + displayInsets.bottom);\n  var adjustedContentSize = new Size(contentSize.width, Math.min(maxHeight, contentSize.height));\n  var tooltipOrigin = new Point(Math.max(displayInsets.left - childContentSpacing, childRect.x - contentSize.width - arrowSize.width - childContentSpacing), contentSize.height >= maxHeight ? displayInsets.top : Math.max(displayInsets.top, childRect.y + (childRect.height - adjustedContentSize.height) / 2));\n  var anchorPoint = new Point(childRect.x - childContentSpacing, childRect.y + childRect.height / 2.0);\n  if (anchorPoint.y + arrowSize.width > windowDims.height - displayInsets.bottom) {\n    anchorPoint.y = windowDims.height - displayInsets.bottom - Math.abs(arrowSize.height - arrowSize.width) - 8;\n  } else if (anchorPoint.y - arrowSize.height < displayInsets.top) {\n    anchorPoint.y = displayInsets.top + Math.abs(arrowSize.height - arrowSize.width) + 8;\n  }\n  var leftPlacementRightBound = anchorPoint.x - arrowSize.width;\n  if (tooltipOrigin.x + contentSize.width > leftPlacementRightBound) {\n    adjustedContentSize.width = leftPlacementRightBound - tooltipOrigin.x;\n  }\n  if (tooltipOrigin.y + contentSize.height > maxHeight) {\n    tooltipOrigin.y = windowDims.height - displayInsets.bottom - adjustedContentSize.height;\n  }\n  return {\n    tooltipOrigin: tooltipOrigin,\n    anchorPoint: anchorPoint,\n    placement: 'left',\n    adjustedContentSize: adjustedContentSize\n  };\n};\nvar computeRightGeometry = function computeRightGeometry(_ref6) {\n  var childRect = _ref6.childRect,\n    contentSize = _ref6.contentSize,\n    arrowSize = _ref6.arrowSize,\n    displayInsets = _ref6.displayInsets,\n    windowDims = _ref6.windowDims,\n    childContentSpacing = _ref6.childContentSpacing;\n  var maxHeight = windowDims.height - (displayInsets.top + displayInsets.bottom);\n  var adjustedContentSize = new Size(contentSize.width, Math.min(maxHeight, contentSize.height));\n  var tooltipOrigin = new Point(Math.min(windowDims.width - displayInsets.right + childContentSpacing, childRect.x + childRect.width + arrowSize.width + childContentSpacing), contentSize.height >= maxHeight ? displayInsets.top : Math.max(displayInsets.top, childRect.y + (childRect.height - adjustedContentSize.height) / 2));\n  var anchorPoint = new Point(childRect.x + childRect.width + childContentSpacing, childRect.y + childRect.height / 2.0);\n  if (anchorPoint.y + arrowSize.width > windowDims.height - displayInsets.bottom) {\n    anchorPoint.y = windowDims.height - displayInsets.bottom - Math.abs(arrowSize.height - arrowSize.width) - 8;\n  } else if (anchorPoint.y - arrowSize.height < displayInsets.top) {\n    anchorPoint.y = displayInsets.top + Math.abs(arrowSize.height - arrowSize.width) + 8;\n  }\n  if (tooltipOrigin.x + contentSize.width > windowDims.width - displayInsets.right) {\n    adjustedContentSize.width = windowDims.width - displayInsets.right - tooltipOrigin.x;\n  }\n  if (tooltipOrigin.y + contentSize.height > maxHeight) {\n    tooltipOrigin.y = windowDims.height - displayInsets.bottom - adjustedContentSize.height;\n  }\n  return {\n    tooltipOrigin: tooltipOrigin,\n    anchorPoint: anchorPoint,\n    placement: 'right',\n    adjustedContentSize: adjustedContentSize\n  };\n};\nexport { Point, Size, Rect, swapSizeDimmensions, makeChildlessRect, computeCenterGeometry, computeTopGeometry, computeBottomGeometry, computeLeftGeometry, computeRightGeometry };","map":{"version":3,"names":["Point","_createClass","x","y","_classCallCheck","Size","width","height","Rect","swapSizeDimmensions","size","makeChildlessRect","_ref","displayInsets","windowDims","placement","top","left","right","bottom","computeCenterGeometry","_ref2","childRect","contentSize","maxWidth","maxHeight","adjustedContentSize","tooltipOrigin","anchorPoint","computeTopGeometry","_ref3","arrowSize","childContentSpacing","Math","min","max","abs","topPlacementBottomBound","computeBottomGeometry","_ref4","computeLeftGeometry","_ref5","leftPlacementRightBound","computeRightGeometry","_ref6"],"sources":["C:/Users/rauna/Project Finalysis/node_modules/react-native-walkthrough-tooltip/src/geom.js"],"sourcesContent":["class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nclass Size {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n}\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n}\n\nconst swapSizeDimmensions = size => new Size(size.height, size.width);\n\nconst makeChildlessRect = ({ displayInsets, windowDims, placement }) => {\n  switch (placement) {\n    case 'bottom':\n      return new Rect(windowDims.width / 2, displayInsets.top, 1, 1);\n\n    case 'right':\n      return new Rect(displayInsets.left, windowDims.height / 2, 1, 1);\n\n    case 'left':\n      return new Rect(\n        windowDims.width - displayInsets.right,\n        windowDims.height / 2,\n        1,\n        1,\n      );\n    case 'top':\n    default:\n      return new Rect(\n        windowDims.width / 2,\n        windowDims.height - displayInsets.bottom,\n        1,\n        1,\n      );\n  }\n};\n\nconst computeCenterGeometry = ({\n  childRect,\n  contentSize,\n  displayInsets,\n  windowDims,\n}) => {\n  const maxWidth =\n    windowDims.width - (displayInsets.left + displayInsets.right);\n  const maxHeight =\n    windowDims.height - (displayInsets.top + displayInsets.bottom);\n\n  const adjustedContentSize = new Size(\n    contentSize.width >= maxWidth ? maxWidth : -1,\n    contentSize.height >= maxHeight ? maxHeight : -1,\n  );\n\n  const tooltipOrigin = new Point(\n    adjustedContentSize.width === -1\n      ? (maxWidth - contentSize.width) / 2 + displayInsets.left\n      : displayInsets.left,\n    adjustedContentSize.height === -1\n      ? (maxHeight - contentSize.height) / 2 + displayInsets.top\n      : displayInsets.top,\n  );\n\n  const anchorPoint = new Point(\n    childRect.x + childRect.width / 2.0,\n    childRect.y,\n  );\n\n  return {\n    tooltipOrigin,\n    anchorPoint,\n    placement: 'center',\n    adjustedContentSize,\n  };\n};\n\nconst computeTopGeometry = ({\n  childRect,\n  contentSize,\n  arrowSize,\n  displayInsets,\n  windowDims,\n  childContentSpacing,\n}) => {\n  const maxWidth =\n    windowDims.width - (displayInsets.left + displayInsets.right);\n\n  const adjustedContentSize = new Size(\n    Math.min(maxWidth, contentSize.width),\n    contentSize.height,\n  );\n\n  const tooltipOrigin = new Point(\n    contentSize.width >= maxWidth\n      ? displayInsets.left\n      : Math.max(\n          displayInsets.left,\n          childRect.x + (childRect.width - adjustedContentSize.width) / 2,\n        ),\n    Math.max(\n      displayInsets.top - childContentSpacing,\n      childRect.y - contentSize.height - arrowSize.height - childContentSpacing,\n    ),\n  );\n\n  const anchorPoint = new Point(\n    childRect.x + childRect.width / 2.0,\n    childRect.y - childContentSpacing,\n  );\n\n  // make sure arrow does not extend beyond displayInsets\n  if (\n    anchorPoint.x + arrowSize.width >\n    windowDims.width - displayInsets.right\n  ) {\n    anchorPoint.x =\n      windowDims.width -\n      displayInsets.right -\n      Math.abs(arrowSize.width - arrowSize.height) -\n      8;\n  } else if (anchorPoint.x - arrowSize.width < displayInsets.left) {\n    anchorPoint.x =\n      displayInsets.left + Math.abs(arrowSize.width - arrowSize.height) + 8;\n  }\n\n  const topPlacementBottomBound = anchorPoint.y - arrowSize.height;\n\n  if (tooltipOrigin.y + contentSize.height > topPlacementBottomBound) {\n    adjustedContentSize.height = topPlacementBottomBound - tooltipOrigin.y;\n  }\n\n  if (tooltipOrigin.x + contentSize.width > maxWidth) {\n    tooltipOrigin.x =\n      windowDims.width - displayInsets.right - adjustedContentSize.width;\n  }\n\n  return {\n    tooltipOrigin,\n    anchorPoint,\n    placement: 'top',\n    adjustedContentSize,\n  };\n};\n\nconst computeBottomGeometry = ({\n  childRect,\n  contentSize,\n  arrowSize,\n  displayInsets,\n  windowDims,\n  childContentSpacing,\n}) => {\n  const maxWidth =\n    windowDims.width - (displayInsets.left + displayInsets.right);\n\n  const adjustedContentSize = new Size(\n    Math.min(maxWidth, contentSize.width),\n    contentSize.height,\n  );\n\n  const tooltipOrigin = new Point(\n    contentSize.width >= maxWidth\n      ? displayInsets.left\n      : Math.max(\n          displayInsets.left,\n          childRect.x + (childRect.width - adjustedContentSize.width) / 2,\n        ),\n    Math.min(\n      windowDims.height - displayInsets.bottom + childContentSpacing,\n      childRect.y + childRect.height + arrowSize.height + childContentSpacing,\n    ),\n  );\n  const anchorPoint = new Point(\n    childRect.x + childRect.width / 2.0,\n    childRect.y + childRect.height + childContentSpacing,\n  );\n\n  // make sure arrow does not extend beyond displayInsets\n  if (\n    anchorPoint.x + arrowSize.width >\n    windowDims.width - displayInsets.right\n  ) {\n    anchorPoint.x =\n      windowDims.width -\n      displayInsets.right -\n      Math.abs(arrowSize.width - arrowSize.height) -\n      8;\n  } else if (anchorPoint.x - arrowSize.width < displayInsets.left) {\n    anchorPoint.x =\n      displayInsets.left + Math.abs(arrowSize.width - arrowSize.height) + 8;\n  }\n\n  if (\n    tooltipOrigin.y + contentSize.height >\n    windowDims.height - displayInsets.bottom\n  ) {\n    adjustedContentSize.height =\n      windowDims.height - displayInsets.bottom - tooltipOrigin.y;\n  }\n\n  if (tooltipOrigin.x + contentSize.width > maxWidth) {\n    tooltipOrigin.x =\n      windowDims.width - displayInsets.right - adjustedContentSize.width;\n  }\n\n  return {\n    tooltipOrigin,\n    anchorPoint,\n    placement: 'bottom',\n    adjustedContentSize,\n  };\n};\n\nconst computeLeftGeometry = ({\n  childRect,\n  contentSize,\n  arrowSize,\n  displayInsets,\n  windowDims,\n  childContentSpacing,\n}) => {\n  const maxHeight =\n    windowDims.height - (displayInsets.top + displayInsets.bottom);\n\n  const adjustedContentSize = new Size(\n    contentSize.width,\n    Math.min(maxHeight, contentSize.height),\n  );\n\n  const tooltipOrigin = new Point(\n    Math.max(\n      displayInsets.left - childContentSpacing,\n      childRect.x - contentSize.width - arrowSize.width - childContentSpacing,\n    ),\n    contentSize.height >= maxHeight\n      ? displayInsets.top\n      : Math.max(\n          displayInsets.top,\n          childRect.y + (childRect.height - adjustedContentSize.height) / 2,\n        ),\n  );\n\n  const anchorPoint = new Point(\n    childRect.x - childContentSpacing,\n    childRect.y + childRect.height / 2.0,\n  );\n\n  // make sure arrow does not extend beyond displayInsets\n  if (\n    anchorPoint.y + arrowSize.width >\n    windowDims.height - displayInsets.bottom\n  ) {\n    anchorPoint.y =\n      windowDims.height -\n      displayInsets.bottom -\n      Math.abs(arrowSize.height - arrowSize.width) -\n      8;\n  } else if (anchorPoint.y - arrowSize.height < displayInsets.top) {\n    anchorPoint.y =\n      displayInsets.top + Math.abs(arrowSize.height - arrowSize.width) + 8;\n  }\n\n  const leftPlacementRightBound = anchorPoint.x - arrowSize.width;\n\n  if (tooltipOrigin.x + contentSize.width > leftPlacementRightBound) {\n    adjustedContentSize.width = leftPlacementRightBound - tooltipOrigin.x;\n  }\n\n  if (tooltipOrigin.y + contentSize.height > maxHeight) {\n    tooltipOrigin.y =\n      windowDims.height - displayInsets.bottom - adjustedContentSize.height;\n  }\n\n  return {\n    tooltipOrigin,\n    anchorPoint,\n    placement: 'left',\n    adjustedContentSize,\n  };\n};\n\nconst computeRightGeometry = ({\n  childRect,\n  contentSize,\n  arrowSize,\n  displayInsets,\n  windowDims,\n  childContentSpacing,\n}) => {\n  const maxHeight =\n    windowDims.height - (displayInsets.top + displayInsets.bottom);\n\n  const adjustedContentSize = new Size(\n    contentSize.width,\n    Math.min(maxHeight, contentSize.height),\n  );\n\n  const tooltipOrigin = new Point(\n    Math.min(\n      windowDims.width - displayInsets.right + childContentSpacing,\n      childRect.x + childRect.width + arrowSize.width + childContentSpacing,\n    ),\n    contentSize.height >= maxHeight\n      ? displayInsets.top\n      : Math.max(\n          displayInsets.top,\n          childRect.y + (childRect.height - adjustedContentSize.height) / 2,\n        ),\n  );\n\n  const anchorPoint = new Point(\n    childRect.x + childRect.width + childContentSpacing,\n    childRect.y + childRect.height / 2.0,\n  );\n\n  // make sure arrow does not extend beyond displayInsets\n  if (\n    anchorPoint.y + arrowSize.width >\n    windowDims.height - displayInsets.bottom\n  ) {\n    anchorPoint.y =\n      windowDims.height -\n      displayInsets.bottom -\n      Math.abs(arrowSize.height - arrowSize.width) -\n      8;\n  } else if (anchorPoint.y - arrowSize.height < displayInsets.top) {\n    anchorPoint.y =\n      displayInsets.top + Math.abs(arrowSize.height - arrowSize.width) + 8;\n  }\n\n  if (\n    tooltipOrigin.x + contentSize.width >\n    windowDims.width - displayInsets.right\n  ) {\n    adjustedContentSize.width =\n      windowDims.width - displayInsets.right - tooltipOrigin.x;\n  }\n\n  if (tooltipOrigin.y + contentSize.height > maxHeight) {\n    tooltipOrigin.y =\n      windowDims.height - displayInsets.bottom - adjustedContentSize.height;\n  }\n\n  return {\n    tooltipOrigin,\n    anchorPoint,\n    placement: 'right',\n    adjustedContentSize,\n  };\n};\n\nexport {\n  Point,\n  Size,\n  Rect,\n  swapSizeDimmensions,\n  makeChildlessRect,\n  computeCenterGeometry,\n  computeTopGeometry,\n  computeBottomGeometry,\n  computeLeftGeometry,\n  computeRightGeometry,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}