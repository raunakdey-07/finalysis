{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nexport var MountRegistry = function () {\n  function MountRegistry() {\n    _classCallCheck(this, MountRegistry);\n  }\n  return _createClass(MountRegistry, null, [{\n    key: \"addMountListener\",\n    value: function addMountListener(listener) {\n      var _this = this;\n      this.mountListeners.add(listener);\n      return function () {\n        _this.mountListeners.delete(listener);\n      };\n    }\n  }, {\n    key: \"addUnmountListener\",\n    value: function addUnmountListener(listener) {\n      var _this2 = this;\n      this.unmountListeners.add(listener);\n      return function () {\n        _this2.unmountListeners.delete(listener);\n      };\n    }\n  }, {\n    key: \"gestureHandlerWillMount\",\n    value: function gestureHandlerWillMount(handler) {\n      this.mountListeners.forEach(function (listener) {\n        return listener(handler);\n      });\n    }\n  }, {\n    key: \"gestureHandlerWillUnmount\",\n    value: function gestureHandlerWillUnmount(handler) {\n      this.unmountListeners.forEach(function (listener) {\n        return listener(handler);\n      });\n    }\n  }, {\n    key: \"gestureWillMount\",\n    value: function gestureWillMount(gesture) {\n      this.mountListeners.forEach(function (listener) {\n        return listener(gesture);\n      });\n    }\n  }, {\n    key: \"gestureWillUnmount\",\n    value: function gestureWillUnmount(gesture) {\n      this.unmountListeners.forEach(function (listener) {\n        return listener(gesture);\n      });\n    }\n  }]);\n}();\n_defineProperty(MountRegistry, \"mountListeners\", new Set());\n_defineProperty(MountRegistry, \"unmountListeners\", new Set());","map":{"version":3,"names":["MountRegistry","_classCallCheck","_createClass","key","value","addMountListener","listener","_this","mountListeners","add","delete","addUnmountListener","_this2","unmountListeners","gestureHandlerWillMount","handler","forEach","gestureHandlerWillUnmount","gestureWillMount","gesture","gestureWillUnmount","Set"],"sources":["C:\\Users\\rauna\\Project Finalysis\\node_modules\\react-native-gesture-handler\\lib\\module\\mountRegistry.ts"],"sourcesContent":["import { GestureType } from './handlers/gestures/gesture';\n\ninterface ReactComponentWithHandlerTag extends React.Component {\n  handlerTag: number;\n}\n\nexport type GestureMountListener = (\n  gesture: GestureType | ReactComponentWithHandlerTag\n) => void;\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class MountRegistry {\n  private static mountListeners = new Set<GestureMountListener>();\n  private static unmountListeners = new Set<GestureMountListener>();\n\n  static addMountListener(listener: GestureMountListener): () => void {\n    this.mountListeners.add(listener);\n\n    return () => {\n      this.mountListeners.delete(listener);\n    };\n  }\n\n  static addUnmountListener(listener: GestureMountListener): () => void {\n    this.unmountListeners.add(listener);\n\n    return () => {\n      this.unmountListeners.delete(listener);\n    };\n  }\n\n  static gestureHandlerWillMount(handler: React.Component) {\n    this.mountListeners.forEach((listener) =>\n      listener(handler as ReactComponentWithHandlerTag)\n    );\n  }\n\n  static gestureHandlerWillUnmount(handler: React.Component) {\n    this.unmountListeners.forEach((listener) =>\n      listener(handler as ReactComponentWithHandlerTag)\n    );\n  }\n\n  static gestureWillMount(gesture: GestureType) {\n    this.mountListeners.forEach((listener) => listener(gesture));\n  }\n\n  static gestureWillUnmount(gesture: GestureType) {\n    this.unmountListeners.forEach((listener) => listener(gesture));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAWA,WAAaA,aAAN;EAAA,SAAAA,cAAA;IAAAC,eAAA,OAAAD,aAAA;EAAA;EAAA,OAAAE,YAAA,CAAAF,aAAA;IAAAG,GAAA;IAAAC,KAAA,EAIkB,SAAhBC,gBAAgBA,CAACC,QAAD,EAA6C;MAAA,IAAAC,KAAA;MAClE,KAAKC,cAAL,CAAoBC,GAApB,CAAwBH,QAAxB;MAEA,OAAO,YAAM;QACXC,KAAA,CAAKC,cAAL,CAAoBE,MAApB,CAA2BJ,QAA3B;MACD,CAFD;IAGD;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAEwB,SAAlBO,kBAAkBA,CAACL,QAAD,EAA6C;MAAA,IAAAM,MAAA;MACpE,KAAKC,gBAAL,CAAsBJ,GAAtB,CAA0BH,QAA1B;MAEA,OAAO,YAAM;QACXM,MAAA,CAAKC,gBAAL,CAAsBH,MAAtB,CAA6BJ,QAA7B;MACD,CAFD;IAGD;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAE6B,SAAvBU,uBAAuBA,CAACC,OAAD,EAA2B;MACvD,KAAKP,cAAL,CAAoBQ,OAApB,CAA6B,UAAAV,QAAD;QAAA,OAC1BA,QAAQ,CAACS,OAAD,CADV;MAAA;IAGD;EAAA;IAAAZ,GAAA;IAAAC,KAAA,EAE+B,SAAzBa,yBAAyBA,CAACF,OAAD,EAA2B;MACzD,KAAKF,gBAAL,CAAsBG,OAAtB,CAA+B,UAAAV,QAAD;QAAA,OAC5BA,QAAQ,CAACS,OAAD,CADV;MAAA;IAGD;EAAA;IAAAZ,GAAA;IAAAC,KAAA,EAEsB,SAAhBc,gBAAgBA,CAACC,OAAD,EAAuB;MAC5C,KAAKX,cAAL,CAAoBQ,OAApB,CAA6B,UAAAV,QAAD;QAAA,OAAcA,QAAQ,CAACa,OAAD,CAAlD;MAAA;IACD;EAAA;IAAAhB,GAAA;IAAAC,KAAA,EAEwB,SAAlBgB,kBAAkBA,CAACD,OAAD,EAAuB;MAC9C,KAAKN,gBAAL,CAAsBG,OAAtB,CAA+B,UAAAV,QAAD;QAAA,OAAcA,QAAQ,CAACa,OAAD,CAApD;MAAA;IACD;EAAA;AAAA;gBAtCUnB,a,oBACqB,IAAIqB,GAAJ,E;gBADrBrB,a,sBAEuB,IAAIqB,GAAJ,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}