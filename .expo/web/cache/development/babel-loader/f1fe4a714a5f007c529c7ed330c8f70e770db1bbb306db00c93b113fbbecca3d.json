{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPress\", \"onLongPress\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { forwardRef, useEffect, useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport { GestureObjects as Gesture } from \"../handlers/gestures/gestureObjects\";\nimport { GestureDetector } from \"../handlers/gestures/GestureDetector\";\nexport var Text = forwardRef(function (props, ref) {\n  var onPress = props.onPress,\n    onLongPress = props.onLongPress,\n    rest = _objectWithoutProperties(props, _excluded);\n  var textRef = useRef(null);\n  var native = Gesture.Native().runOnJS(true);\n  var refHandler = function refHandler(node) {\n    textRef.current = node;\n    if (ref === null) {\n      return;\n    }\n    if (typeof ref === 'function') {\n      ref(node);\n    } else {\n      ref.current = node;\n    }\n  };\n  refHandler.rngh = true;\n  useEffect(function () {\n    if (Platform.OS !== 'web') {\n      return;\n    }\n    var textElement = ref ? ref.current : textRef.current;\n    textElement === null || textElement === void 0 ? void 0 : textElement.setAttribute('rnghtext', 'true');\n  }, []);\n  return onPress || onLongPress ? React.createElement(GestureDetector, {\n    gesture: native\n  }, React.createElement(RNText, _extends({\n    onPress: onPress,\n    onLongPress: onLongPress,\n    ref: refHandler\n  }, rest))) : React.createElement(RNText, _extends({\n    ref: ref\n  }, rest));\n});","map":{"version":3,"names":["React","forwardRef","useEffect","useRef","Platform","RNText","GestureObjects","Gesture","GestureDetector","Text","props","ref","onPress","onLongPress","rest","_objectWithoutProperties","_excluded","textRef","native","Native","runOnJS","refHandler","node","current","rngh","OS","textElement","setAttribute","createElement","gesture","_extends"],"sources":["C:\\Users\\rauna\\Project Finalysis\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\Text.tsx"],"sourcesContent":["import React, {\n  ForwardedRef,\n  forwardRef,\n  RefObject,\n  useEffect,\n  useRef,\n} from 'react';\nimport {\n  Platform,\n  Text as RNText,\n  TextProps as RNTextProps,\n} from 'react-native';\n\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\n\nexport const Text = forwardRef(\n  (props: RNTextProps, ref: ForwardedRef<RNText>) => {\n    const { onPress, onLongPress, ...rest } = props;\n\n    const textRef = useRef<RNText | null>(null);\n    const native = Gesture.Native().runOnJS(true);\n\n    const refHandler = (node: any) => {\n      textRef.current = node;\n\n      if (ref === null) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n\n    // This is a special case for `Text` component. After https://github.com/software-mansion/react-native-gesture-handler/pull/3379 we check for\n    // `displayName` field. However, `Text` from RN has this field set to `Text`, but is also present in `RNSVGElements` set.\n    // We don't want to treat our `Text` as the one from `SVG`, therefore we add special field to ref.\n    refHandler.rngh = true;\n\n    useEffect(() => {\n      if (Platform.OS !== 'web') {\n        return;\n      }\n\n      const textElement = ref\n        ? (ref as RefObject<RNText>).current\n        : textRef.current;\n\n      // At this point we are sure that textElement is div in HTML tree\n      (textElement as unknown as HTMLDivElement)?.setAttribute(\n        'rnghtext',\n        'true'\n      );\n    }, []);\n\n    return onPress || onLongPress ? (\n      <GestureDetector gesture={native}>\n        <RNText\n          onPress={onPress}\n          onLongPress={onLongPress}\n          ref={refHandler}\n          {...rest}\n        />\n      </GestureDetector>\n    ) : (\n      <RNText ref={ref} {...rest} />\n    );\n  }\n);\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type Text = typeof Text & RNText;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAEEC,UAFF,EAIEC,SAJF,EAKEC,MALF,QAMO,OANP;AAAA,OAAAC,QAAA;AAAA,OAAAC,MAAA;AAaA,SAASC,cAAc,IAAIC,OAA3B;AACA,SAASC,eAAT;AAEA,OAAO,IAAMC,IAAI,GAAGR,UAAU,CAC5B,UAACS,KAAD,EAAqBC,GAArB,EAAmD;EACjD,IAAQC,OAAF,GAAoCF,KAA1C,CAAQE,OAAF;IAAWC,WAAX,GAAoCH,KAA1C,CAAiBG,WAAX;IAA2BC,IAAA,GAAAC,wBAAA,CAASL,KAA1C,EAAAM,SAAA;EAEA,IAAMC,OAAO,GAAGd,MAAM,CAAgB,IAAhB,CAAtB;EACA,IAAMe,MAAM,GAAGX,OAAO,CAACY,MAAR,GAAiBC,OAAjB,CAAyB,IAAzB,CAAf;EAEA,IAAMC,UAAU,GAAI,SAAdA,UAAUA,CAAIC,IAAD,EAAe;IAChCL,OAAO,CAACM,OAAR,GAAkBD,IAAlB;IAEA,IAAIX,GAAG,KAAK,IAAZ,EAAkB;MAChB;IACD;IAED,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;MAC7BA,GAAG,CAACW,IAAD,CAAH;IACD,CAFD,MAEO;MACLX,GAAG,CAACY,OAAJ,GAAcD,IAAd;IACD;EACF,CAZD;EAiBAD,UAAU,CAACG,IAAX,GAAkB,IAAlB;EAEAtB,SAAS,CAAC,YAAM;IACd,IAAIE,QAAQ,CAACqB,EAAT,KAAgB,KAApB,EAA2B;MACzB;IACD;IAED,IAAMC,WAAW,GAAGf,GAAG,GAClBA,GAAD,CAA2BY,OADR,GAEnBN,OAAO,CAACM,OAFZ;IAKCG,WAAD,aAACA,WAAD,uBAACA,WAAD,CAA4CC,YAA5C,CACE,UADF,EAEE,MAFF;EAID,CAdQ,EAcN,EAdM,CAAT;EAgBA,OAAOf,OAAO,IAAIC,WAAX,GACLb,KAAA,CAAA4B,aAAA,CAACpB,eAAD;IAAiBqB,OAAO,EAAEX;EAA1B,GACElB,KAAA,CAAA4B,aAAA,CAACvB,MAAD,EAAAyB,QAAA;IACElB,OAAO,EAAEA,OADX;IAEEC,WAAW,EAAEA,WAFf;IAGEF,GAAG,EAAEU;EAHP,GAIMP,IAJN,EADF,CADK,GAULd,KAAA,CAAA4B,aAAA,CAACvB,MAAD,EAAAyB,QAAA;IAAQnB,GAAG,EAAEA;EAAb,GAAsBG,IAAtB,EAVF;AAYD,CAtD2B,CAAvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}