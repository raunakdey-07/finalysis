{"ast":null,"code":"import { registerHandler } from \"../../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../../RNGestureHandlerModule\";\nimport { filterConfig, scheduleFlushOperations } from \"../../utils\";\nimport { ActionType } from \"../../../ActionType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ghQueueMicrotask } from \"../../../ghQueueMicrotask\";\nimport { extractGestureRelations, checkGestureCallbacksForWorklets, ALLOWED_PROPS } from \"./utils\";\nimport { MountRegistry } from \"../../../mountRegistry\";\nexport function attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesturesToAttach = _ref.gesturesToAttach,\n    viewTag = _ref.viewTag,\n    webEventHandlersRef = _ref.webEventHandlersRef;\n  gestureConfig.initialize();\n  ghQueueMicrotask(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n  for (var handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n  ghQueueMicrotask(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (var _handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, extractGestureRelations(_handler)));\n    }\n    scheduleFlushOperations();\n  });\n  for (var gesture of gesturesToAttach) {\n    var actionType = gesture.shouldUseReanimated ? ActionType.REANIMATED_WORKLET : ActionType.JS_FUNCTION_NEW_API;\n    if (Platform.OS === 'web') {\n      RNGestureHandlerModule.attachGestureHandler(gesture.handlerTag, viewTag, ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(gesture.handlerTag, viewTag, actionType);\n    }\n    MountRegistry.gestureWillMount(gesture);\n  }\n  preparedGesture.attachedGestures = gesturesToAttach;\n  if (preparedGesture.animatedHandlers) {\n    var isAnimatedGesture = function isAnimatedGesture(g) {\n      return g.shouldUseReanimated;\n    };\n    preparedGesture.animatedHandlers.value = gesturesToAttach.filter(isAnimatedGesture).map(function (g) {\n      return g.handlers;\n    });\n  }\n}","map":{"version":3,"names":["registerHandler","RNGestureHandlerModule","filterConfig","scheduleFlushOperations","ActionType","Platform","ghQueueMicrotask","extractGestureRelations","checkGestureCallbacksForWorklets","ALLOWED_PROPS","MountRegistry","attachHandlers","_ref","preparedGesture","gestureConfig","gesturesToAttach","viewTag","webEventHandlersRef","initialize","isMounted","prepare","handler","createGestureHandler","handlerName","handlerTag","config","testId","updateGestureHandler","gesture","actionType","shouldUseReanimated","REANIMATED_WORKLET","JS_FUNCTION_NEW_API","OS","attachGestureHandler","JS_FUNCTION_OLD_API","gestureWillMount","attachedGestures","animatedHandlers","isAnimatedGesture","g","value","filter","map","handlers"],"sources":["C:\\Users\\rauna\\Project Finalysis\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\GestureDetector\\attachHandlers.ts"],"sourcesContent":["import React from 'react';\nimport { GestureType, HandlerCallbacks } from '../gesture';\nimport { registerHandler } from '../../handlersRegistry';\nimport RNGestureHandlerModule from '../../../RNGestureHandlerModule';\nimport { filterConfig, scheduleFlushOperations } from '../../utils';\nimport { ComposedGesture } from '../gestureComposition';\nimport { ActionType } from '../../../ActionType';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../../RNGestureHandlerModule.web';\nimport { ghQueueMicrotask } from '../../../ghQueueMicrotask';\nimport { AttachedGestureState, WebEventHandler } from './types';\nimport {\n  extractGestureRelations,\n  checkGestureCallbacksForWorklets,\n  ALLOWED_PROPS,\n} from './utils';\nimport { MountRegistry } from '../../../mountRegistry';\n\ninterface AttachHandlersConfig {\n  preparedGesture: AttachedGestureState;\n  gestureConfig: ComposedGesture | GestureType;\n  gesturesToAttach: GestureType[];\n  viewTag: number;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nexport function attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesturesToAttach,\n  viewTag,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  gestureConfig.initialize();\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n\n  for (const handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (const handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(\n          handler.config,\n          ALLOWED_PROPS,\n          extractGestureRelations(handler)\n        )\n      );\n    }\n\n    scheduleFlushOperations();\n  });\n\n  for (const gesture of gesturesToAttach) {\n    const actionType = gesture.shouldUseReanimated\n      ? ActionType.REANIMATED_WORKLET\n      : ActionType.JS_FUNCTION_NEW_API;\n\n    if (Platform.OS === 'web') {\n      (\n        RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n      )(\n        gesture.handlerTag,\n        viewTag,\n        ActionType.JS_FUNCTION_OLD_API, // Ignored on web\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        actionType\n      );\n    }\n\n    MountRegistry.gestureWillMount(gesture);\n  }\n\n  preparedGesture.attachedGestures = gesturesToAttach;\n\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = (g: GestureType) => g.shouldUseReanimated;\n\n    preparedGesture.animatedHandlers.value = gesturesToAttach\n      .filter(isAnimatedGesture)\n      .map((g) => g.handlers) as unknown as HandlerCallbacks<\n      Record<string, unknown>\n    >[];\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAT;AACA,OAAOC,sBAAP;AACA,SAASC,YAAT,EAAuBC,uBAAvB;AAEA,SAASC,UAAT;AAAA,OAAAC,QAAA;AAGA,SAASC,gBAAT;AAEA,SACEC,uBADF,EAEEC,gCAFF,EAGEC,aAHF;AAKA,SAASC,aAAT;AAUA,OAAO,SAASC,cAATA,CAAAC,IAAA,EAMkB;EAAA,IALvBC,eAD6B,GAAAD,IAAA,CAC7BC,eAD6B;IAE7BC,aAF6B,GAAAF,IAAA,CAE7BE,aAF6B;IAG7BC,gBAH6B,GAAAH,IAAA,CAG7BG,gBAH6B;IAI7BC,OAJ6B,GAAAJ,IAAA,CAI7BI,OAJ6B;IAK7BC,mBAAA,GAAAL,IAAA,CAAAK,mBAAA;EAEAH,aAAa,CAACI,UAAd;EAIAZ,gBAAgB,CAAC,YAAM;IACrB,IAAI,CAACO,eAAe,CAACM,SAArB,EAAgC;MAC9B;IACD;IACDL,aAAa,CAACM,OAAd;EACD,CALe,CAAhB;EAOA,KAAK,IAAMC,OAAX,IAAsBN,gBAAtB,EAAwC;IACtCP,gCAAgC,CAACa,OAAD,CAAhC;IACApB,sBAAsB,CAACqB,oBAAvB,CACED,OAAO,CAACE,WADV,EAEEF,OAAO,CAACG,UAFV,EAGEtB,YAAY,CAACmB,OAAO,CAACI,MAAT,EAAiBhB,aAAjB,CAHd;IAMAT,eAAe,CAACqB,OAAO,CAACG,UAAT,EAAqBH,OAArB,EAA8BA,OAAO,CAACI,MAAR,CAAeC,MAA7C,CAAf;EACD;EAIDpB,gBAAgB,CAAC,YAAM;IACrB,IAAI,CAACO,eAAe,CAACM,SAArB,EAAgC;MAC9B;IACD;IACD,KAAK,IAAME,QAAX,IAAsBN,gBAAtB,EAAwC;MACtCd,sBAAsB,CAAC0B,oBAAvB,CACEN,QAAO,CAACG,UADV,EAEEtB,YAAY,CACVmB,QAAO,CAACI,MADE,EAEVhB,aAFU,EAGVF,uBAAuB,CAACc,QAAD,CAHb,CAFd;IAQD;IAEDlB,uBAAuB;EACxB,CAhBe,CAAhB;EAkBA,KAAK,IAAMyB,OAAX,IAAsBb,gBAAtB,EAAwC;IACtC,IAAMc,UAAU,GAAGD,OAAO,CAACE,mBAAR,GACf1B,UAAU,CAAC2B,kBADI,GAEf3B,UAAU,CAAC4B,mBAFf;IAIA,IAAI3B,QAAQ,CAAC4B,EAAT,KAAgB,KAApB,EAA2B;MAEvBhC,sBAAsB,CAACiC,oBADzB,CAGEN,OAAO,CAACJ,UAHV,EAIER,OAJF,EAKEZ,UAAU,CAAC+B,mBALb,EAMElB,mBANF;IAQD,CATD,MASO;MACLhB,sBAAsB,CAACiC,oBAAvB,CACEN,OAAO,CAACJ,UADV,EAEER,OAFF,EAGEa,UAHF;IAKD;IAEDnB,aAAa,CAAC0B,gBAAd,CAA+BR,OAA/B;EACD;EAEDf,eAAe,CAACwB,gBAAhB,GAAmCtB,gBAAnC;EAEA,IAAIF,eAAe,CAACyB,gBAApB,EAAsC;IACpC,IAAMC,iBAAiB,GAAI,SAArBA,iBAAiBA,CAAIC,CAAD;MAAA,OAAoBA,CAAC,CAACV,mBAAhD;IAAA;IAEAjB,eAAe,CAACyB,gBAAhB,CAAiCG,KAAjC,GAAyC1B,gBAAgB,CACtD2B,MADsC,CAC/BH,iBAD+B,EAEtCI,GAFsC,CAEjC,UAAAH,CAAD;MAAA,OAAOA,CAAC,CAACI,QAFyB;IAAA,EAAzC;EAKD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}