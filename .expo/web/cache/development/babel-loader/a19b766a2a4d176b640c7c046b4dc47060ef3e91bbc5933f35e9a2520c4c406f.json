{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar _UIManagerAny$getView;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { customDirectEventTypes } from \"./customDirectEventTypes\";\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\nimport { handlerIDToTag, registerOldGestureHandler, unregisterOldGestureHandler } from \"./handlersRegistry\";\nimport { getNextHandlerTag } from \"./getNextHandlerTag\";\nimport { filterConfig, scheduleFlushOperations } from \"./utils\";\nimport findNodeHandle from \"../findNodeHandle\";\nimport { deepEqual, isFabric, isReact19, isTestEnv, tagMessage } from \"../utils\";\nimport { ActionType } from \"../ActionType\";\nimport { PressabilityDebugView } from \"./PressabilityDebugView\";\nimport GestureHandlerRootViewContext from \"../GestureHandlerRootViewContext\";\nimport { ghQueueMicrotask } from \"../ghQueueMicrotask\";\nimport { MountRegistry } from \"../mountRegistry\";\nvar UIManagerAny = UIManager;\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent'\n};\nvar customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nvar customGHEventsConfig = _objectSpread({\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n}, isFabric() && Platform.OS === 'android' && customGHEventsConfigFabricAndroid);\nUIManagerAny.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerAny.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManagerAny$getView = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView === void 0 ? void 0 : _UIManagerAny$getView.call(UIManagerAny, 'getConstants');\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = _defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2(_defineProperty2({}, State.UNDETERMINED, undefined), State.BEGAN, 'onBegan'), State.FAILED, 'onFailed'), State.CANCELLED, 'onCancelled'), State.ACTIVE, 'onActivated'), State.END, 'onEnded');\nvar UNRESOLVED_REFS_RETRY_LIMIT = 1;\nexport default function createHandler(_ref) {\n  var name = _ref.name,\n    _ref$allowedProps = _ref.allowedProps,\n    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n    _ref$config = _ref.config,\n    config = _ref$config === void 0 ? {} : _ref$config,\n    transformProps = _ref.transformProps,\n    _ref$customNativeProp = _ref.customNativeProps,\n    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n  var Handler = function (_React$Component) {\n    function Handler(props) {\n      var _this;\n      _classCallCheck(this, Handler);\n      _this = _callSuper(this, Handler, [props]);\n      _defineProperty(_this, \"handlerTag\", -1);\n      _defineProperty(_this, \"config\", void 0);\n      _defineProperty(_this, \"propsRef\", void 0);\n      _defineProperty(_this, \"isMountedRef\", void 0);\n      _defineProperty(_this, \"viewNode\", void 0);\n      _defineProperty(_this, \"viewTag\", void 0);\n      _defineProperty(_this, \"inspectorToggleListener\", void 0);\n      _defineProperty(_this, \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onGestureEvent === 'function') {\n            var _this$props$onGesture, _this$props;\n            (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n          }\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty(_this, \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onHandlerStateChange === 'function') {\n            var _this$props$onHandler, _this$props3;\n            (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          }\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty(_this, \"refHandler\", function (node) {\n        var _props;\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = isReact19() ? (_props = child.props) === null || _props === void 0 ? void 0 : _props.ref : child === null || child === void 0 ? void 0 : child.ref;\n        if (!ref) {\n          return;\n        }\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      });\n      _defineProperty(_this, \"createGestureHandler\", function (newConfig) {\n        _this.handlerTag = getNextHandlerTag();\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n      _defineProperty(_this, \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, ActionType.JS_FUNCTION_OLD_API, _this.propsRef);\n        } else {\n          registerOldGestureHandler(_this.handlerTag, {\n            onGestureEvent: _this.onGestureHandlerEvent,\n            onGestureStateChange: _this.onGestureHandlerStateChange\n          });\n          var actionType = function () {\n            var _this$props5, _this$props6;\n            var onGestureEvent = (_this$props5 = _this.props) === null || _this$props5 === void 0 ? void 0 : _this$props5.onGestureEvent;\n            var isGestureHandlerWorklet = onGestureEvent && ('current' in onGestureEvent || 'workletEventHandler' in onGestureEvent);\n            var onHandlerStateChange = (_this$props6 = _this.props) === null || _this$props6 === void 0 ? void 0 : _this$props6.onHandlerStateChange;\n            var isStateChangeHandlerWorklet = onHandlerStateChange && ('current' in onHandlerStateChange || 'workletEventHandler' in onHandlerStateChange);\n            var isReanimatedHandler = isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n            if (isReanimatedHandler) {\n              return ActionType.REANIMATED_WORKLET;\n            } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n              return ActionType.NATIVE_ANIMATED_EVENT;\n            } else {\n              return ActionType.JS_FUNCTION_OLD_API;\n            }\n          }();\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, actionType);\n        }\n        scheduleFlushOperations();\n        ghQueueMicrotask(function () {\n          MountRegistry.gestureHandlerWillMount(_this);\n        });\n      });\n      _defineProperty(_this, \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n        scheduleFlushOperations();\n      });\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.isMountedRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\" + props.id + \"\\\" already registered\");\n        }\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n      return _this;\n    }\n    _inherits(Handler, _React$Component);\n    return _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var props = this.props;\n        this.isMountedRef.current = true;\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        if (hasUnresolvedRefs(props)) {\n          ghQueueMicrotask(function () {\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        if (!this.viewNode) {\n          throw new Error(\"[Gesture Handler] Failed to obtain view for \" + Handler.displayName + \". Note that old API doesn't support functional components.\");\n        }\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n        this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n        (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n        this.isMountedRef.current = false;\n        if (Platform.OS !== 'web') {\n          unregisterOldGestureHandler(this.handlerTag);\n        }\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n        scheduleFlushOperations();\n        var handlerID = this.props.id;\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n        MountRegistry.gestureHandlerWillUnmount(this);\n      }\n    }, {\n      key: \"update\",\n      value: function update(remainingTries) {\n        var _this3 = this;\n        if (!this.isMountedRef.current) {\n          return;\n        }\n        var props = this.props;\n        if (hasUnresolvedRefs(props) && remainingTries > 0) {\n          ghQueueMicrotask(function () {\n            _this3.update(remainingTries - 1);\n          });\n        } else {\n          var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n          if (!deepEqual(this.config, newConfig)) {\n            this.updateGestureHandler(newConfig);\n          }\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props$testID;\n        if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n          throw new Error(name + ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.');\n        }\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props7 = this.props,\n          onGestureEvent = _this$props7.onGestureEvent,\n          onGestureHandlerEvent = _this$props7.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props8 = this.props,\n          onHandlerStateChange = _this$props8.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props8.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = null;\n        try {\n          child = React.Children.only(this.props.children);\n        } catch (e) {\n          throw new Error(tagMessage(name + \" got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.\"));\n        }\n        var grandChildren = child.props.children;\n        if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(React.createElement(PressabilityDebugView, {\n            key: \"pressabilityDebugView\",\n            color: \"mediumspringgreen\",\n            hitSlop: child.props.hitSlop\n          }));\n        }\n        return React.cloneElement(child, _objectSpread(_objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, isTestEnv() ? {\n          handlerType: name,\n          handlerTag: this.handlerTag,\n          enabled: this.props.enabled\n        } : {}), {}, {\n          testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID\n        }, events), grandChildren);\n      }\n    }]);\n  }(React.Component);\n  _defineProperty(Handler, \"displayName\", name);\n  _defineProperty(Handler, \"contextType\", GestureHandlerRootViewContext);\n  return Handler;\n}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","customDirectEventTypes","RNGestureHandlerModule","State","handlerIDToTag","registerOldGestureHandler","unregisterOldGestureHandler","getNextHandlerTag","filterConfig","scheduleFlushOperations","findNodeHandle","deepEqual","isFabric","isReact19","isTestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","MountRegistry","UIManagerAny","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","_objectSpread","onGestureHandlerEvent","onGestureHandlerStateChange","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","getViewManagerConfig","call","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","_defineProperty2","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_this","_classCallCheck","_callSuper","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","_props","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props5","_this$props6","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","gestureHandlerWillMount","updateGestureHandler","createRef","isMountedRef","id","Error","_inherits","_createClass","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","concat","_toConsumableArray","displayName","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","gestureHandlerWillUnmount","remainingTries","_this3","setNativeProps","updates","mergedProps","render","_this$props$testID","context","gestureEventHandler","_this$props7","gestureStateEventHandler","_this$props8","events","e","grandChildren","type","toArray","push","createElement","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","enabled","testID","Component"],"sources":["C:\\Users\\rauna\\Project Finalysis\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  registerOldGestureHandler,\n  unregisterOldGestureHandler,\n} from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { ValueOf } from '../typeUtils';\nimport {\n  deepEqual,\n  isFabric,\n  isReact19,\n  isTestEnv,\n  tagMessage,\n} from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nimport { MountRegistry } from '../mountRegistry';\nimport { ReactElement } from 'react';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n\nconst UIManagerConstants = UIManagerAny.getViewManagerConfig?.('getConstants');\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>,\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag = -1;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      if (!this.viewNode) {\n        throw new Error(\n          `[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`\n        );\n      }\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      if (Platform.OS !== 'web') {\n        unregisterOldGestureHandler(this.handlerTag);\n      }\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n\n      MountRegistry.gestureHandlerWillUnmount(this);\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // @ts-ignore Since React 19 ref is accessible as standard prop\n      // https://react.dev/blog/2024/04/25/react-19-upgrade-guide#deprecated-element-ref\n      const ref = isReact19() ? (child as ReactElement).props?.ref : child?.ref;\n\n      if (!ref) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.handlerTag = getNextHandlerTag();\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n\n      ghQueueMicrotask(() => {\n        MountRegistry.gestureHandlerWillMount(this);\n      });\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isTestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}